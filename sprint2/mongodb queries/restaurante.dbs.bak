<?xml version="1.0" encoding="UTF-8" ?>
<project name="MongoDb" id="Project-ccc" database="MongoDb" >
	<schema name="restaurante" >
		<table name="restaurants" >
			<column name="_id" type="oid" length="800" decimal="0" jt="-8" mandatory="y" />
			<column name="address" type="object" length="800" decimal="0" jt="4999544" mandatory="y" >
				<column name="building" type="string" length="800" decimal="0" jt="12" mandatory="y" />
				<column name="coord" type="array" length="800" decimal="0" jt="4999545" mandatory="y" />
				<column name="street" type="string" length="800" decimal="0" jt="12" mandatory="y" />
				<column name="zipcode" type="string" length="800" decimal="0" jt="12" mandatory="y" />
			</column>
			<column name="borough" type="string" length="800" decimal="0" jt="12" mandatory="y" />
			<column name="cuisine" type="string" length="800" decimal="0" jt="12" mandatory="y" />
			<column name="grades" type="array[object]" length="800" decimal="0" jt="4999545" mandatory="y" >
				<column name="date" type="date" length="800" decimal="0" jt="91" mandatory="y" />
				<column name="grade" type="string" length="800" decimal="0" jt="12" mandatory="y" />
				<column name="score" type="int" length="800" decimal="0" jt="4" mandatory="y" />
			</column>
			<column name="name" type="string" length="800" decimal="0" jt="12" mandatory="y" />
			<column name="restaurant_id" type="string" length="800" decimal="0" jt="12" mandatory="y" />
			<index name="_id_" unique="PRIMARY_KEY" >
				<column name="_id" />
			</index>
		</table>
	</schema>
	<connector name="MongoDb" database="MongoDb" driver_class="com.dbschema.MongoJdbcDriver" driver_jar="mongojdbc3.1.jar" driver_desc="No Authentication" host="localhost" port="27017" instance="restaurante" user="admin" />
	<layout name="Main Layout" id="Layout-15d2" show_column_type="y" show_relation="name" >
		<entity schema="restaurante" name="restaurants" column="address" color="BED3F4" x="288" y="176" />
		<entity schema="restaurante" name="restaurants" column="grades" color="BED3F4" x="288" y="304" />
		<entity schema="restaurante" name="restaurants" color="BED3F4" x="48" y="176" />
		<callout x="48" y="80" pointer="Round" >
			<comment><![CDATA[Double-click collection headers or fields to edit.
Create multiple layouts (diagrams) with the same or different collections. 
Saving the model to file will save also the layouts.]]></comment>
		</callout>
		<group name="Collection &#039;restaurants&#039;" color="ECF0F7" >
			<entity schema="restaurante" name="restaurants" />
			<entity schema="restaurante" name="restaurants" column="address" />
			<entity schema="restaurante" name="restaurants" column="grades" />
		</group>
		<script name="Query" id="Editor-100" language="SQL" >
			<string><![CDATA[db.restaurants.find();
db.restaurants.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});
db.restaurants.find({}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1});
db.restaurants.find({}, {_id: 0, restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1});
db.restaurants.find( { borough: "Bronx" } , {} );	
db.restaurants.find( { borough: "Bronx" } , {} ).limit(5);
db.restaurants.find( { borough: "Bronx" } , {} ).skip(5).limit(5)
//8. 
db.restaurants.find({"grades.score": {$gt: 90}});
//9. Escribe una consulta para encontrar los restaurantes que tienen un resultado de más de 80 pero menos que 100
db.restaurants.find({"grades.score": {"$gt": 80, "$lt": 100}})
//10. Escribe una consulta para encontrar los restaurantes que localizan en valor de latitud menos que -95.754168
db.restaurants.find({'address.coord.0': { "$lt": -95.754168 } } )
//11. Escribe una consulta de MongoDB para encontrar los restaurantes que no preparan ninguna cuisine de 'American' y su puntaje de calificación superior a 70 y latitud inferior a -65.754168
db.restaurants.find( { "address.coord.0": {$lt:65.75}, cuisine : {$ne : "American "}, "grades.score": {$gt:70}}); 
//12. Escribe una consulta para encontrar los restaurantes cuáles no preparan ninguna cuisine de 'American' y logró un marcador más que 70 y localizado en la longitud menos que -65.754168. Nota : Haz esta consulta sin utilizar $and operador
db.restaurants.find({ "address.coord.1": {  $lt:65.75  }, cuisine :{ $ne : "American "  },"grades.score": {  $gt : 70 } }); 
//13. Escribe una consulta para encontrar los restaurantes cuáles no preparan ninguna cuisine de 'American' y logró un punto de grado 'A' no pertenece a Brooklyn. Se debe mostrar el documento según la cuisine en orden descendente
db.restaurants.find( { cuisine: { $ne: "American " }, grades: { $elemMatch: { grade: { $eq: "A" } } }, borough: { $ne: "Brooklyn" } } ).sort( { cuisine: -1 } )
//14. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes cuál contener 'Wil' como las tres primeras letras en su nombre
db.restaurants.find( { name: {"$regex": "^Wil"}}, { restaurant_id:1, name:1, borough:1, cuisine: 1, _id:0 } )
//15. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes cuál contener 'ces' como las últimas tres letras en su nombre
db.restaurants.find( { name: {"$regex": "ces$"}  } , { restaurant_id:1, name:1, borough:1, cuisine: 1, _id:0 } )
//16. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes cuál contener 'Reg' como tres letras en algún lugar en su nombre
db.restaurants.find({ name: { "$regex": "Reg" } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 } )
//17. Escribe una consulta para encontrar los restaurantes cuáles pertenecen al Bronx y preparó cualquier plato Americano o chino
db.restaurants.find({borough: { $eq: "Bronx" }, cuisine: { $in: ["American ", "Chinese"] } } )
//18. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que pertenecen a Staten Island o Queens o Bronxor Brooklyn
db.restaurants.find({ $or: [{borough:"Staten Island"},{borough:"Queens"},{borough:"Bronx"}, {borough:"Brooklyn"}]},{_id:0, restaurant_id:1,name:1,borough:1,cuisine:1}) 
//19. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que no pertenecen a Staten Island o Queens o Bronxor Brooklyn
db.restaurants.find({ $nor: [{borough:"Staten Island"},{borough:"Queens"},{borough:"Bronx"}, {borough:"Brooklyn"}]},{_id:0, restaurant_id:1,name:1,borough:1,cuisine:1}) 
//20. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que consigan un marcador cuál no es más que 10
db.restaurants.find({ "grades.score": {$lte:10}}, {restaurant_id:1, name:1, borough:1, cuisine:1})
//21. Escribe una consulta para encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que preparan pescado excepto 'American' y 'Chinees' o el name del restaurante comienza con letras 'Wil'
db.restaurants.find( { "$or": [ { "cuisine": { $nin: [ "American ", "Chinese" ] }}, { "name": { "$regex": "^Wil" } } ] }, 
                     { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 } )
//22. Escribe una consulta para encontrar el restaurant_id, name, y grades para aquellos restaurantes que consigan un grade "A" y un score 11 en datos de estudio ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({
		$and:[
			{"grades.date": ISODate("2014-08-11T00:00:00Z")},
			{"grades.grade": "A"},
			{"grades.score": 10}
		]},
		{restaurant_id:1, name:1, grades:1}
	);
//23. Escribe una consulta para encontrar el restaurante_id, name y grades para aquellos restaurantes donde el 2º elemento de variedad de grades contiene un grado de "A" y marcador 9 sobre un ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({
		$and:[
			{"grades.1.grade": "A"},
			{"grades.score": 9},
			{"grades.date": ISODate("2014-08-11T00:00:00Z")}
		]},
		{restaurant_id:1, name:1, grades:1}
	);
//24 Escribe una consulta para encontrar el restaurante_id, name, dirección y ubicación geográfica para aquellos restaurantes en los que el segundo elemento del array coord contiene un valor cuál es más que 42 y hasta 52
db.restaurants.find({"address.coord.1": {$gt: 42, $lt: 52 }}, {_id: 0, restaurant_id: "$restaurant_id", name: "$name", address: "$address", coord: "$coord"})
//25 Escribe una consulta para organizar el nombre de los restaurantes en orden ascendente junto con todas las columnas
db.restaurants.find({}).sort({name:1})
//26 Escribe una consulta para organizar el nombre de los restaurantes al descender junto con todas las columnas
db.restaurants.find({}).sort({name:-1})

//27 Escribe una consulta a organizar el nombre de la cuisine en orden ascendente y por el mismo barrio de cuisine. Orden descendiendo
db.restaurants.find({}).sort({cuisine: 1, borough: -1})

//28. Escribe una consulta para saber tanto si todas las direcciones contienen la calle o no
db.restaurants.find({"address.street": "" })
//29. Escribe una consulta cuál seleccionar todos los documentos en la colección de restaurantes donde el valor del campo coord es Double
db.restaurants.find({"address.coord": { $type: "double" } })
//30 Escribe una consulta cuál seleccionará el restaurant_id, name y grade para aquellos restaurantes qué retornos 0 como resto después de dividir el marcador por 7
db.restaurants.find({"grades.score": {$mod: [7, 0]}}, {_id: 0, restaurant_id: 1, name: 1, grades: 1})
//31 Escribe una consulta para encontrar el name de restaurante, borough, longitud y altitud y cuisine para aquellos restaurantes que contienen 'mon' como tres letras en algún lugar de su name
db.restaurants.find({ name: { "$regex": "mon" } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 } )
//32 Escribe una consulta para encontrar el name de restaurante, borough, longitud y latitud y cuisine para aquellos restaurantes que contienen 'Mad' como primeras tres letras de su name
db.restaurants.find( { name: {"$regex": "^Mad"}}, { restaurant_id:1, name:1, borough:1, cuisine: 1, _id:0 } )]]></string>
		</script>
	</layout>
	<layout name="~Layout with Sample Tools" id="Layout-14a7" show_column_type="y" show_relation="name" >
		<entity schema="restaurante" name="restaurants" column="address" color="BED3F4" x="288" y="80" />
		<entity schema="restaurante" name="restaurants" column="grades" color="BED3F4" x="288" y="208" />
		<entity schema="restaurante" name="restaurants" color="BED3F4" x="48" y="80" />
		<group name="restaurants" color="ECF0F7" >
			<entity schema="restaurante" name="restaurants" />
			<entity schema="restaurante" name="restaurants" column="address" />
			<entity schema="restaurante" name="restaurants" column="grades" />
		</group>
		<script name="Query Editor" id="Editor-23f0" language="SQL" >
			<string><![CDATA[restaurante.restaurants.find()

//OR

USE restaurante;
db.restaurants.find()

//OR

USE restaurante;
db.getCollection('restaurants').find()]]></string>
		</script>
		<browser id="Browse-715" name="Relational Data Explorer" confirm_updates="y" >
			<browse_table schema="restaurante" entity="restaurants" x="20" y="20" width="400" height="300" record_view="y" />
		</browser>
		<query id="Query-475" name="Query Builder" >
			<query_table schema="restaurante" name="restaurants" alias="restaurants" x="48" y="48" >
				<column name="_id" />
				<column name="address" />
				<column name="borough" />
				<column name="cuisine" />
				<column name="grades" />
				<column name="name" />
				<column name="restaurant_id" />
			</query_table>
		</query>
		<form name="Report &amp; Charts" id="Report-56c" template="Page" css="container-fluid" view="frame" >
			<var name="samplePageNumber" type="4" value="0" mandatory="n" />
			<var name="sampleRecordsPerPage" type="4" value="100" mandatory="n" />
			<body name="Body" template="Grid" pos="0,0,0,0,f,f" layout="{{-2,-2,-2,-2,-1},{-2,-2,-2,-2}}" scroll="n" html="n" >
				<cell type="label" name="Restaurants Data" template="H3" pos="0,0,1,0,l,c" />
				<cell type="label" name="&lt;i&gt;Extend this report with master-detail tables, buttons, images, etc. Click any cell to:&#10;&lt;ul&gt;&lt;li&gt;Edit its component. &#10;&lt;li&gt;Create new component in empty cells. &#10;&lt;li&gt;Add new rows or columns. &#10;&lt;li&gt;Merge cells. &#10;&lt;/ul&gt; Tables have their own cells and data source script. Details in Help and Quick Tour." template="Plain" pos="2,0,4,0,l,c" />
				<cell type="chart" name="Line" template="Line" pos="0,1,4,1,l,c" >
					<form_script type="DataSource" language="SQL" >
						<var name="_id" type="-8" />
						<var name="address" type="4999544" />
						<var name="borough" type="-1" />
						<var name="cuisine" type="-1" />
						<var name="grades" type="4999545" />
						<var name="name" type="-1" />
						<var name="restaurant_id" type="-1" />
						<script ><![CDATA[restaurante.restaurants.find()]]></script>
					</form_script>
				</cell>
				<tableview name="sample" template="Table" css="table table-striped table-sm table-hover" pos="0,2,4,2,f,f" layout="{{-2,-2,-2,-2,-2,-2,-2},{-2,-2}}" scroll="n" html="n" header_rows="1" >
					<form_script type="DataSource" language="SQL" >
						<var name="_id" type="-8" />
						<var name="address" type="4999544" />
						<var name="borough" type="-1" />
						<var name="cuisine" type="-1" />
						<var name="grades" type="4999545" />
						<var name="name" type="-1" />
						<var name="restaurant_id" type="-1" />
						<script ><![CDATA[restaurante.restaurants.find()]]></script>
					</form_script>
					<cell type="label" name="_id" pos="0,0,0,0,c,c" />
					<cell type="label" name="address" pos="1,0,1,0,c,c" />
					<cell type="label" name="borough" pos="2,0,2,0,c,c" />
					<cell type="label" name="cuisine" pos="3,0,3,0,c,c" />
					<cell type="label" name="grades" pos="4,0,4,0,c,c" />
					<cell type="label" name="name" pos="5,0,5,0,c,c" />
					<cell type="label" name="Button can be configured to&lt;br&gt; open another sheet as page or dialog." pos="6,0,6,0,c,c" />
					<cell type="label" name="${_id}" template="Plain" pos="0,1,0,1,l,c" />
					<cell type="label" name="${address}" template="Plain" pos="1,1,1,1,l,c" />
					<cell type="label" name="${borough}" template="Plain" pos="2,1,2,1,l,c" />
					<cell type="label" name="${cuisine}" template="Plain" pos="3,1,3,1,l,c" />
					<cell type="label" name="${grades}" template="Plain" pos="4,1,4,1,l,c" />
					<cell type="label" name="${name}" template="Plain" pos="5,1,5,1,l,c" />
					<cell type="button" name="More" template="Plain" css="btn btn-default btn-success" pos="6,1,6,1,c,c" ref_id="Report-56c" />
				</tableview>
				<cell type="href" name="" disabled="${samplePageNumber&lt;1}" pos="0,3,0,3,l,c" glyph="FA-ANGLE_DOUBLE_LEFT" ref_id="Report-56c" >
					<var name="samplePageNumber" value="0" />
				</cell>
				<cell type="href" name="" disabled="${samplePageNumber&lt;1}" pos="1,3,1,3,l,c" glyph="FA-ANGLE_LEFT" ref_id="Report-56c" >
					<var name="samplePageNumber" value="${Math.max(0,samplePageNumber-1)}" />
				</cell>
				<cell type="label" name="Page ${samplePageNumber+1}" pos="2,3,2,3,l,c" />
				<cell type="href" name="" disabled="${!sampleHasNextPage}" pos="3,3,3,3,l,c" glyph="FA-ANGLE_RIGHT" ref_id="Report-56c" >
					<var name="samplePageNumber" value="${( samplePageNumber+1 )}" />
				</cell>
			</body>
		</form>
	</layout>
</project>